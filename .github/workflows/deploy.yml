name: Deploy

on:
  push:
    branches:
      - 'main'
      - 'develop'
    tags:
      - 'v*'

env:
  PROJECT_NAME: nitrotype-tracker
  API_IMAGE: nitrotype-tracker-api
  WEB_IMAGE: nitrotype-tracker-web
  API_DOCKERFILE: backend/NitroType.Tracker.Api/Dockerfile
  WEB_DOCKERFILE: frontend/Dockerfile
  REGISTRY: ghcr.io
  BADGE_GIST_ID: 0184962696ef0364be7a3f491133f2f9
  REPO_USER: ewancoder
  CHECK_FETCH_DEPTH: 30
  DOTNET_VERSION: '9.0.x'

jobs:
  check-changed-files:
    name: Check changed files
    runs-on: ubuntu-latest
    outputs:
      frontend_changed: ${{ steps.filter.outputs.frontend }}
      backend_changed: ${{ steps.filter.outputs.backend }}
      db_changed: ${{ steps.filter.outputs.db }}

    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ env.CHECK_FETCH_DEPTH }}

      - name: Check if files changed
        id: filter
        run: |
          BEFORE_SHA="${{ github.event.before }}"
          CURRENT_SHA=$(git rev-parse HEAD)
          echo "Checking files:"
          echo "BEFORE_SHA: $BEFORE_SHA"
          echo "CURRENT_SHA: $CURRENT_SHA"
          if [ "$BEFORE_SHA" == "0000000000000000000000000000000000000000" ] || [ -z "$BEFORE_SHA" ]; then
            echo "First time push. Deploying everything."
            echo "frontend=true" >> $GITHUB_OUTPUT
            echo "backend=true" >> $GITHUB_OUTPUT
            echo "db=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          if ! git diff --name-only $BEFORE_SHA HEAD > diff; then
            echo "Git diff failed, falling back to deployment. Deploying everything."
            echo "frontend=true" >> $GITHUB_OUTPUT
            echo "backend=true" >> $GITHUB_OUTPUT
            echo "db=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          if grep -q '^frontend/' diff; then
            echo "Frontend files changed. Deploying frontend."
            echo "frontend=true" >> $GITHUB_OUTPUT
          fi
          if grep -q '^backend/' diff; then
            echo "Backend files changed. Deploying backend."
            echo "backend=true" >> $GITHUB_OUTPUT
          fi
          if grep -q '^db/' diff; then
            echo "DB files changed. Deploying database."
            echo "db=true" >> $GITHUB_OUTPUT
          fi

  test-api:
    name: Test API
    runs-on: ubuntu-latest
    needs: check-changed-files
    if: needs.check-changed-files.outputs.backend_changed == 'true'

    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # TODO: Consider generating package.lock.json file and using cache for all setup-dotnet actions.
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Test solution
        run: dotnet test --logger trx --logger html --results-directory tests --collect "XPlat Code Coverage" *.slnx
        working-directory: backend

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: '!cancelled()'
        with:
          name: api-test-results
          path: backend/tests/

      - name: Create coverage report
        uses: irongut/CodeCoverageSummary@v1.3.0
        if: '!cancelled()'
        with:
          filename: 'backend/tests/*/coverage.cobertura.xml'
          badge: true
          format: 'markdown'
          output: 'both'
          fail_below_min: true
          thresholds: '0 80'

      - name: Write coverage report to job summary
        run: |
          cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY |
          echo COVERAGE=$(cat code-coverage-results.md | awk -F'|' '{print $2}' | sed -n 's/.*\*\*\([0-9]*\)%.*/\1/p') >> $GITHUB_ENV
        if: '!cancelled()'

      # TODO: Consider adding icon/logo here.
      - name: Create coverage badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        if: '!cancelled()'
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ env.BADGE_GIST_ID }}
          filename: ${{ env.API_IMAGE }}-coverage-${{ github.ref_name }}.json
          label: API Coverage
          message: ${{ env.COVERAGE }}%
          valColorRange: ${{ env.COVERAGE }}
          maxColorRange: 80
          minColorRange: 0

  test-api-mutation:
    name: API mutation testing
    runs-on: ubuntu-latest
    needs: [check-changed-files, test-api]
    if: needs.check-changed-files.outputs.backend_changed == 'true'

    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install Stryker
        run: dotnet tool install -g dotnet-stryker

      - name: Mutation testing
        run: dotnet stryker -O stryker
        working-directory: backend

      # TODO: Consider writing info to summary & badges.
      - name: Upload mutation test results
        uses: actions/upload-artifact@v4
        with:
          name: api-mutation-test-results
          path: backend/stryker/reports/mutation-report.html

  build-api:
    name: Build API
    runs-on: ubuntu-latest
    needs: [check-changed-files, test-api]
    if: needs.check-changed-files.outputs.backend_changed == 'true'
    outputs:
      sha: ${{ steps.save.outputs.sha }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_USER }}/${{ env.API_IMAGE }}
          tags: |
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=tag
            type=semver,pattern={{raw}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=sha

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ./backend
          file: ${{ env.API_DOCKERFILE }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Save SHA tag for deployment
        id: save
        run: |
          SHA_TAG=$(echo "${{ steps.meta.outputs.tags }}" | grep "sha-" | cut -d':' -f2)
          echo "Saving SHA tag: $SHA_TAG"
          echo "sha=$SHA_TAG" >> $GITHUB_OUTPUT

  test-web:
    runs-on: ubuntu-latest
    needs: check-changed-files
    if: needs.check-changed-files.outputs.frontend_changed == 'true'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Adding Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install Dependencies
        run: pnpm install
        working-directory: frontend

      - name: Test App
        run: pnpm test --watch=false --browsers=ChromeHeadless --code-coverage
        working-directory: frontend

      - name: Write to Job Summary
        if: '!cancelled()'
        run: |
          cat coverage/coverage.txt >> $GITHUB_STEP_SUMMARY |
          echo COVERAGE=$(cat coverage/coverage.txt | grep % | awk -F '[% ]+' '{ sum += $3; count++ } END { print sum/count }') >> $GITHUB_ENV
        working-directory: frontend

      - name: Create Awesome Badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        if: '!cancelled()'
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ env.BADGE_GIST_ID }}
          filename: ${{ env.WEB_IMAGE }}-coverage-${{ github.ref_name }}.json
          label: WEB UI Coverage
          message: ${{ env.COVERAGE }}%
          valColorRange: ${{ env.COVERAGE }}
          maxColorRange: 80
          minColorRange: 0

  test-web-mutation:
    runs-on: ubuntu-latest
    needs: [check-changed-files, test-web]
    if: needs.check-changed-files.outputs.frontend_changed == 'true'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Adding Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install Dependencies
        run: pnpm install
        working-directory: frontend

      - name: Test App Mutation
        run: pnpm exec stryker run
        working-directory: frontend

      - name: Upload Stryker HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-mutation-report.html
          path: frontend/reports/mutation/mutation.html

  build-web:
    runs-on: ubuntu-latest
    needs: [check-changed-files, test-web]
    if: needs.check-changed-files.outputs.frontend_changed == 'true'
    outputs:
      sha: ${{ steps.save.outputs.sha }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set CONFIG_FILE
        id: set-config
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "CONFIG_FILE=config.production.ts" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "CONFIG_FILE=config.development.ts" >> $GITHUB_ENV
          fi

      - name: Login to GitHub Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_USER }}/${{ env.WEB_IMAGE }}
          tags: |
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=tag
            type=semver,pattern={{raw}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=sha

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ./frontend
          file: ${{ env.WEB_DOCKERFILE }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            CONFIG_FILE=${{ env.CONFIG_FILE }}

      - name: Save SHA tag for deployment
        id: save
        run: |
          SHA_TAG=$(echo "${{ steps.meta.outputs.tags }}" | grep "sha-" | cut -d':' -f2)
          echo "Saving SHA tag: $SHA_TAG"
          echo "sha=$SHA_TAG" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: [check-changed-files, build-api, build-web]
    if: |
      always() && !cancelled() &&
      github.ref == 'refs/heads/main' &&
      (
        needs.check-changed-files.outputs.backend_changed == 'true' ||
        needs.check-changed-files.outputs.frontend_changed == 'true' ||
        needs.check-changed-files.outputs.db_changed == 'true'
      )

    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          passphrase: ${{ secrets.PASSWORD }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          source: "db,docker-compose.yml,.env.prod"
          target: "/tmp/nitrotype-tracker"

      - name: Deploy to DO
        uses: appleboy/ssh-action@v1.0.3
        env:
          DB_CHANGED: ${{ needs.check-changed-files.outputs.db_changed }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          passphrase: ${{ secrets.PASSWORD }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          envs: DB_CHANGED
          script: |
            cd /tmp/nitrotype-tracker
            mv .env.prod .env
            sed -i '/ports:/{N;d}' docker-compose.yml
            docker compose pull
            docker compose up -d postgres
            if [ "$DB_CHANGED" == "true" ]; then
              echo "Database has changed, deploying it."
              docker stop nitrotype-tracker-api
              docker run --rm \
                --network typingrealm \
                -v /tmp/nitrotype-tracker/db/migrations:/db/migrations \
                --env-file /data/nitrotype-tracker/secrets.env \
                amacneil/dbmate:latest --wait up
              if [ $? -ne 0 ]; then
                echo "Migration failed, restarting old API container"
                docker start nitrotype-tracker-api
                exit 1
              fi
            fi
            docker compose up -d

  deploy-develop:
    runs-on: ubuntu-latest
    needs: [check-changed-files, build-api, build-web]
    if: |
      always() && !cancelled() &&
      github.ref == 'refs/heads/develop' &&
      (
        needs.check-changed-files.outputs.backend_changed == 'true' ||
        needs.check-changed-files.outputs.frontend_changed == 'true' ||
        needs.check-changed-files.outputs.db_changed == 'true'
      )

    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          passphrase: ${{ secrets.PASSWORD }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          source: "db,docker-compose.yml,.env.dev"
          target: "/tmp/dev-nitrotype-tracker"

      - name: Deploy to DO
        uses: appleboy/ssh-action@v1.0.3
        env:
          DB_CHANGED: ${{ needs.check-changed-files.outputs.db_changed }}
          API_SHA_TAG: ${{ needs.build-api.outputs.sha }}
          WEB_SHA_TAG: ${{ needs.build-web.outputs.sha }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          passphrase: ${{ secrets.PASSWORD }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          envs: DB_CHANGED,API_SHA_TAG,WEB_SHA_TAG
          script: |
            echo "DB_CHANGED: $DB_CHANGED"
            echo "API_SHA_TAG: $API_SHA_TAG"
            echo "WEB_SHA_TAG: $WEB_SHA_TAG"
            cd /tmp/dev-nitrotype-tracker
            mv .env.dev .env
            sed -i "s/API_TAG=/API_TAG=$API_SHA_TAG/g" .env
            sed -i "s/WEB_TAG=/WEB_TAG=$WEB_SHA_TAG/g" .env
            docker compose pull
            docker compose up -d postgres
            if [ "$DB_CHANGED" == "true" ]; then
              echo "Database has changed, deploying it."
              docker stop dev-nitrotype-tracker-api
              docker run --rm \
                --network typingrealm \
                -v /tmp/dev-nitrotype-tracker/db/migrations:/db/migrations \
                --env-file /data/dev-nitrotype-tracker/secrets.env \
                amacneil/dbmate:latest --wait up
              if [ $? -ne 0 ]; then
                echo "Migration failed, restarting old API container"
                docker start dev-nitrotype-tracker-api
                exit 1
              fi
            fi
            docker compose up -d
