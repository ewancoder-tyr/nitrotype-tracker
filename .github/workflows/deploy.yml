name: Deploy

on:
  push:
    branches:
      - 'main'
      - 'develop'

env:
  PROJECT_NAME: nitrotype-tracker
  API_IMAGE: nitrotype-tracker-api
  WEB_UI_IMAGE: nitrotype-tracker-web
  API_DOCKERFILE: backend/NitroType.Tracker.Api/Dockerfile
  WEB_UI_DOCKERFILE: frontend/Dockerfile
  REGISTRY: ghcr.io
  REPO_USER: ewancoder
  CHECK_FETCH_DEPTH: 30
  DOTNET_VERSION: '9.0.x'

jobs:
  check-changed-files:
    runs-on: ubuntu-latest
    outputs:
      frontend_changed: ${{ steps.filter.outputs.frontend }}
      backend_changed: ${{ steps.filter.outputs.backend }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ env.CHECK_FETCH_DEPTH }}

      - name: Check if files changed
        id: filter
        run: |
          BEFORE_SHA="${{ github.event.before }}"
          echo "Checking files"
          if [ "$BEFORE_SHA" == "0000000000000000000000000000000000000000" ] || [ -z "$BEFORE_SHA" ]; then
            echo "First time push"
            echo "frontend=true" >> $GITHUB_OUTPUT
            echo "backend=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          if ! git diff --name-only $BEFORE_SHA HEAD > diff; then
            echo "Git diff failed, falling back to deployment."
            echo "frontend=true" >> $GITHUB_OUTPUT
            echo "backend=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          if grep -q '^frontend/' diff; then
            echo "Frontend files changed"
            echo "frontend=true" >> $GITHUB_OUTPUT
          fi
          if grep -q '^backend/' diff; then
            echo "Backend files changed"
            echo "backend=true" >> $GITHUB_OUTPUT
          fi

  test-api:
    runs-on: ubuntu-latest
    if: needs.check-changed-files.outputs.backend_changed == 'true'
    needs: check-changed-files

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Test
        run: dotnet test --logger trx --logger html --results-directory coverage --collect "XPlat Code Coverage"
        working-directory: backend

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: '!cancelled()'
        with:
          name: coverage
          path: backend/coverage

      - name: Code coverage summary report
        uses: irongut/CodeCoverageSummary@v1.3.0
        if: '!cancelled()'
        with:
          filename: 'backend/coverage/*/coverage.cobertura.xml'
          badge: true
          format: 'markdown'
          output: 'both'
          fail_below_min: true
          thresholds: '0 80'

      - name: Write to Job Summary
        run: |
          cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY |
          echo COVERAGE=$(cat code-coverage-results.md | awk -F'|' '{print $2}' | sed -n 's/.*\*\*\([0-9]*\)%.*/\1/p') >> $GITHUB_ENV
        if: '!cancelled()'

      - name: Create Awesome Badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        if: '!cancelled()'
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 0184962696ef0364be7a3f491133f2f9
          filename: ${{ env.API_IMAGE }}-coverage-${{ github.ref_name }}.json
          label: API Coverage
          message: ${{ env.COVERAGE }}%
          valColorRange: ${{ env.COVERAGE }}
          maxColorRange: 80
          minColorRange: 0

  build-api:
    runs-on: ubuntu-latest
    if: needs.check-changed-files.outputs.backend_changed == 'true'
    needs: test-api

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to GitHub Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_USER }}/${{ env.API_IMAGE }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ./backend
          file: ${{ env.API_DOCKERFILE }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  test-web-ui:
    runs-on: ubuntu-latest
    if: needs.check-changed-files.outputs.frontend_changed == 'true'
    needs: check-changed-files

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Adding Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install Dependencies
        run: pnpm install
        working-directory: frontend

      - name: Test App
        run: pnpm test --watch=false --browsers=ChromeHeadless --code-coverage
        working-directory: frontend

      - name: Write to Job Summary
        if: '!cancelled()'
        run: |
          cat coverage/coverage.txt >> $GITHUB_STEP_SUMMARY |
          echo COVERAGE=$(cat coverage/coverage.txt | grep % | awk -F '[% ]+' '{ sum += $3; count++ } END { print sum/count }') >> $GITHUB_ENV
        working-directory: frontend

      - name: Create Awesome Badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        if: '!cancelled()'
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 0184962696ef0364be7a3f491133f2f9
          filename: ${{ env.WEB_UI_IMAGE }}-coverage-${{ github.ref_name }}.json
          label: WEB UI Coverage
          message: ${{ env.COVERAGE }}%
          valColorRange: ${{ env.COVERAGE }}
          maxColorRange: 80
          minColorRange: 0

  build-web-ui:
    runs-on: ubuntu-latest
    if: needs.check-changed-files.outputs.frontend_changed == 'true'
    needs: test-web-ui

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set CONFIG_FILE
        id: set-config
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "CONFIG_FILE=config.production.ts" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "CONFIG_FILE=config.development.ts" >> $GITHUB_ENV
          fi

      - name: Login to GitHub Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_USER }}/${{ env.WEB_UI_IMAGE }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ./frontend
          file: ${{ env.WEB_UI_DOCKERFILE }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            CONFIG_FILE=${{ env.CONFIG_FILE }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build-api, build-web-ui]
    if: |
      always() && !cancelled() &&
      github.ref == 'refs/heads/main' &&
      (needs.check-changed-files.outputs.backend_changed == 'true' || needs.check-changed-files.outputs.frontend_changed == 'true')

    permissions:
      contents: read

    steps:
      - name: Deploy to DO
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          passphrase: ${{ secrets.PASSWORD }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            mkdir -p /tmp/nitrotype-tracker
            curl https://raw.githubusercontent.com/ewancoder/nitrotype-tracker/main/docker-compose.yml > /tmp/nitrotype-tracker/docker-compose.yml
            curl https://raw.githubusercontent.com/ewancoder/nitrotype-tracker/develop/.env.prod > /tmp/nitrotype-tracker/.env
            sed -i '/ports:/{N;d}' /tmp/nitrotype-tracker/docker-compose.yml
            docker compose -f /tmp/nitrotype-tracker/docker-compose.yml pull
            docker compose -f /tmp/nitrotype-tracker/docker-compose.yml up -d

  deploy-develop:
    runs-on: ubuntu-latest
    needs: [build-api, build-web-ui]
    if: |
      always() && !cancelled() &&
      github.ref == 'refs/heads/develop' &&
      (needs.check-changed-files.outputs.backend_changed == 'true' || needs.check-changed-files.outputs.frontend_changed == 'true')

    permissions:
      contents: read

    steps:
      - name: Deploy to DO
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          passphrase: ${{ secrets.PASSWORD }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            mkdir -p /tmp/dev-nitrotype-tracker
            curl https://raw.githubusercontent.com/ewancoder/nitrotype-tracker/develop/docker-compose.yml > /tmp/dev-nitrotype-tracker/docker-compose.yml
            curl https://raw.githubusercontent.com/ewancoder/nitrotype-tracker/develop/.env.dev > /tmp/dev-nitrotype-tracker/.env
            docker compose -f /tmp/dev-nitrotype-tracker/docker-compose.yml pull
            docker compose -f /tmp/dev-nitrotype-tracker/docker-compose.yml up -d
